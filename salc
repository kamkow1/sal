#!/usr/bin/env python3

import sys
import lark
import os
import abc
import pprint

class Node(abc.ABC):
    def __init__(self, line, col):
        self.line = line
        self.col  = col

class Func_Type_Node(Node):
    def __init__(self, line, col, return_type):
        super().__init__(line, col)
        self.return_type = return_type

class Plain_Type_Node(Node):
    def __init__(self, line, col, text):
        super().__init__(line, col)
        self.text = text

class Decl_Node(Node):
    def __init__(self, line, col, name, type_):
        super().__init__(line, col)
        self.name  = name
        self.type_ = type_

class Start_Node(Node):
    def __init__(self, line, col, decls):
        super().__init__(line, col)
        self.decls = decls

class Ast_Builder(lark.Transformer):
    def func_type(self, items):
        return_type = items[0]
        return Func_Type_Node(items[0].line, items[0].column, return_type)

    def plain_type(self, items):
        text = items[0].value
        return Plain_Type_Node(items[0].line, items[0].column, text)

    def declaration(self, items):
        name = items[0].value
        type_ = items[1]
        return Decl_Node(items[0].line, items[0].column, name, type_)

    def start(self, items):
        return Start_Node(0, 0, items)

def visit(node):
    if isinstance(node, Start_Node):
        for decl in node.decls:
            visit(decl)
    elif isinstance(node, Decl_Node):
        print(node.name)
    else:
        print("TODO: Unhandled node type " + str(type(node)))
        print(pprint.pformat(vars(node), indent=4, width=1))
        sys.exit(1)

def process_source(source):
    with open("sal.lark") as f:
        grammar = f.read()
    
    p = lark.Lark(grammar, start="start", ambiguity="explicit")
    tree = p.parse(source)
    transformed = Ast_Builder().transform(tree)
    visit(transformed)

class Command:
    def __init__(self, fn, desc):
        self.fn   = fn
        self.desc = desc

def build_command(argv):
    if len(argv) == 0:
        print("Bad arguments. Help:")
        print(commands["build"].desc)
        sys.exit(1)

    file = argv.pop(0)

    # TOOD: Parse additional options

    with open(file, "r") as f:
        source = f.read()
    process_source(source)

def help_command(argv):
    global commands

    print("Commands:\n")
    for command in commands:
        print(commands[command].desc)

commands = {
    "build": Command(
        build_command,
        (
            f"{sys.argv[0]} build <FILE> <options>\n"
            "builds an executable from <FILE> source file\n"
        )
    ),
    "help":  Command(
        help_command,
        (
            f"{sys.argv[0]} help\n"
            "prints this help message\n"
        )
    )
}

def main():
    os.chdir(os.path.dirname(os.path.realpath(__file__)))

    argv = sys.argv

    if len(argv) < 2:
        print("No command provided")
        sys.exit(1)

    argv.pop(0)
    command = argv[0]
    if command in commands:
        argv.pop(0)
        commands[command].fn(argv)
    else:
        print(f"Unknown command '{command}'")
        sys.exit(1)

main()

