%import common.CNAME
%import common.WS
%import common.NUMBER
%import common.HEXDIGIT
%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.ESCAPED_STRING

DECLARE: "declare"
DEFINE: "define"
VA_ARGS: "..."
HEX_NUMBER: ( "0" "x" ("0".."9" | "a".."f" | "A".."F")+ )
EQ: "=="
NEQ: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="
U: "u"
BOR: "|"
PLUS: "+"

IDENTIFIER: (CNAME "::")? CNAME | ("$"? CNAME)

start: statement*

code_block: ( "{" statement* "}" ) | "then" statement

?statement: proc
    | variable
    | reassignment
    | proc_call
    | return_statement
    | if_statement
    | namespace
    | compile_if
    | for_statement

for_pre: statement?
for_cond: expression?
for_post: statement?

for_statement: "for" for_pre ";" for_cond ";" for_post code_block

compile_if: "compile_if" IDENTIFIER "=" ESCAPED_STRING code_block

namespace: "namespace" IDENTIFIER

if_statement: "if" expression code_block else_block?

else_block: "else" code_block

return_statement: "return" expression

proc_call: expression type_list? "(" (expression ("," expression)*)? ")"

type_list: "[" (expression ("," expression)*)? "]"

variable: modifier* "var" IDENTIFIER type assign?

reassignment: expression assign

assign: "=" expression

?expression: integer
    | addr_of
    | IDENTIFIER
    | ESCAPED_STRING
    | proc_call
    | ("type" type)
    | dereference
    | compare
    | infix

infix_op: U? (BOR | PLUS)

infix: expression infix_op expression

compare_op: U? (EQ | NEQ | LT | GT | LE | GE)

compare: expression compare_op expression

dereference: "*" expression

addr_of: "&" expression

integer: NUMBER | HEX_NUMBER

proc: link? template? modifier* "proc" IDENTIFIER proc_params type code_block?

link: "link" ESCAPED_STRING

template: "template" "[" IDENTIFIER ("," IDENTIFIER)* "]"

modifier: DECLARE | DEFINE

proc_params_pair: (IDENTIFIER type) | VA_ARGS

proc_params: "(" (proc_params_pair ("," proc_params_pair)*)? ")"

?type: plain_type | ptr_type | proc_type

ptr_type: "*" type

plain_type: IDENTIFIER

proc_type: "proc" proc_params type

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT

