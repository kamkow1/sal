import std/Bool.sal

declare proc printf(format *int8, ...) int

declare var b int

template[T] define proc generic_proc(x *$T) $T
{
    define var cond int64 = 10

    if cond seq 1 {
        define var aba int = 3
        return 33
    } elif cond seq 2 {
        return 22
    } elif cond seq 3 {
        return 44
    }

    printf(cast(type *int8, &"TRUE = %d\n"), TRUE)

    return *x
}

define proc regular_proc() int
{
    return 1
}

make_template(generic_proc, type int)

define proc Main() void
{
    define var a int = 4

    a = 6

    // b = 10 // Will segfault, because b is not linked yet

    declare var c *int

    c = &a

    declare var d *proc() void

    d = &Main

    define var p *int8 = cast(type *int8, &"Hello world\n")
    printf(p)

    printf(cast(type *int8, &"Hello from SAL, %d\n"), *c)

    *c = 6969

    printf(cast(type *int8, &"generic_proc: %d\n"), generic_proc[type int](c))
    
}

