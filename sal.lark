%import common.CNAME
%import common.WS
%import common.NUMBER
%import common.HEXDIGIT
%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.ESCAPED_STRING

DECLARE: "declare"
DEFINE: "define"
VA_ARGS: "..."
HEX_NUMBER: ( "0" "x" ("0".."9" | "a".."f" | "A".."F")+ )

IDENTIFIER: (CNAME "::")? CNAME | ("$"? CNAME)

start: statement*

code_block: "{" statement* "}"

?statement: proc
    | variable
    | reassignment
    | proc_call
    | return_statement
    | if_statement
    | namespace

namespace: "namespace" IDENTIFIER

if_statement: "if" expression code_block elif_block* else_block?

elif_block: "elif" expression code_block

else_block: "else" code_block

return_statement: "return" expression

proc_call: expression type_list? "(" (expression ("," expression)*)? ")"

type_list: "[" (expression ("," expression)*)? "]"

variable: modifier* "var" IDENTIFIER type assign?

reassignment: expression assign

assign: "=" expression

?expression: integer
    | addr_of
    | IDENTIFIER
    | ESCAPED_STRING
    | proc_call
    | ("type" type)
    | dereference
    | sequals
    | bor

bor: expression "|" expression

sequals: expression "seq" expression

dereference: "*" expression

addr_of: "&" expression

integer: NUMBER | HEX_NUMBER

proc: link? template? modifier* "proc" IDENTIFIER proc_params type code_block?

link: "link" ESCAPED_STRING

template: "template" "[" IDENTIFIER ("," IDENTIFIER)* "]"

modifier: DECLARE | DEFINE

proc_params_pair: (IDENTIFIER type) | VA_ARGS

proc_params: "(" (proc_params_pair ("," proc_params_pair)*)? ")"

?type: plain_type | ptr_type | proc_type

ptr_type: "*" type

plain_type: IDENTIFIER

proc_type: "proc" proc_params type

%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT

